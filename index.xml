<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://nikj-fr.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Mon, 04 Oct 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nikj-fr.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tutorial - Setup Remote Kernel Debugging</title>
      <link>https://nikj-fr.github.io/articles/setup_remote_kernel_debugging/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/articles/setup_remote_kernel_debugging/</guid>
      <description>Setup Remote Kernel Debugging I assume you know how to install a Virtual Machine and the WDK. In case you don&amp;rsquo;t I put links besides:
 VirtualBox Windows Tools for ISO WDK WinDBG  I recommand you to make a snapshot before starting the following steps..
Enable Kernel Debugging Start the command prompt as Administrator in order to run the following commands. The first one enable the debugging, and the second one defines the configuration to be used for the debugging.</description>
    </item>
    
    <item>
      <title>Practical Malware Analysis - Lab 10</title>
      <link>https://nikj-fr.github.io/walkthroughs/pma_lab10/</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/walkthroughs/pma_lab10/</guid>
      <description>Kernel Debugging with WinDbg Lab 10 This chapter explore ways to use WinDbg for kernel debugging and rootkit analysis.
Lab 10-1 Does this program make any direct changes to the registry ? The user-space program calls the ControlService function. Can you set a breakpoint with WinDbg to see what is executed in the kernel as a result of th ecall to ControlService ? What does this program do ? Lab 10-2 Does this program create any files ?</description>
    </item>
    
    <item>
      <title>Practical Malware Analysis - Lab 9</title>
      <link>https://nikj-fr.github.io/walkthroughs/pma_lab9/</link>
      <pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/walkthroughs/pma_lab9/</guid>
      <description>OllyDBG Lab 9 I choose x64DBG instead of OllyDBG because I found the HMI better, and I feel more familiar with the tool.
Lab 9-1 How can you get this malware to install itself ? Firstly, let&amp;rsquo;s put the malware in the debugger. The program is immediately pauses once it hits the entrypoint.
At 0x402AFD, the number of argument is compared to 1. I didn&amp;rsquo;t set any parameters when starting the debug.</description>
    </item>
    
    <item>
      <title>Tutorial - Unpack Self Injection Packer</title>
      <link>https://nikj-fr.github.io/articles/self_injection/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/articles/self_injection/</guid>
      <description>Table of content  Introduction Overview How to detect the technique ? Unpack Princess Locker  Introduction Malware authors try to hide themselves from antivirus and make analysis harder. One of technique is called &amp;ldquo;packing&amp;rdquo;, it means to make the code obfuscated and unreable. In this post, we&amp;rsquo;ll look at one specific kind of unpacking technique that you can use to finally start the analysis of the real payload. This technique is called Self-Injection.</description>
    </item>
    
    <item>
      <title>Practical Reverse Engineering - Ex 2</title>
      <link>https://nikj-fr.github.io/walkthroughs/prr_ex2/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/walkthroughs/prr_ex2/</guid>
      <description>1 - A) Given what you learned about CALL and RET, explain how you would read the value of EIP ?
EIP is used to save the return address after a CALL or a RET for example. In this way, the program will resume correctly and it can continue the execution flow.
I&amp;rsquo;ll use a CALL to a function to modify EIP. Inside this function, we have to save the value of EIP inside a register.</description>
    </item>
    
    <item>
      <title>Practical Reverse Engineering - Ex 1</title>
      <link>https://nikj-fr.github.io/walkthroughs/prr_ex1/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/walkthroughs/prr_ex1/</guid>
      <description>Question This function uses a combination SCAS and STOS to do its work. First, explain what is the type of the [EBP+8] and [EBP+C] in line 1 and 8 respectively. Next explain what this snippet does.
01: 8B 7D 08 mov edi, [ebp+8] 02: 8B D7 mov edx, edi 03: 33 C0 xor eax, eax 04: 83 C9 FF or ecx, 0FFFFFFFFh 05: F2 AE repne scasb 06: 83 C1 02 add ecx, 2 07: F7 D9 neg ecx 08: 8A 45 0C mov al, [ebp+0Ch] 09: 8B AA mov edi, edx 10: F3 AA rep stosb 11: 8B C2 mov eax, edx Analysis EBP is a pointer referencing the bottom of the stack.</description>
    </item>
    
    <item>
      <title>Practical Malware Analysis - Lab 7</title>
      <link>https://nikj-fr.github.io/walkthroughs/pma_lab7/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/walkthroughs/pma_lab7/</guid>
      <description>Analyzing Malicious Windows Program Lab 7 The goal of this lab is to help understand how a malware interact with the operating system.
Lab 7-1 How does this program ensure that it continues running (achieves persistence) when the computer is restarted ? In the main function, there is a StartServiceCtrlDispatcher API call which allow to connect the thread of a service process to the service control manager. The name of the service is MalService.</description>
    </item>
    
    <item>
      <title>Practical Malware Analysis - Lab 6</title>
      <link>https://nikj-fr.github.io/walkthroughs/pma_lab6/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/walkthroughs/pma_lab6/</guid>
      <description>Recognizing C Code Constructs Lab 6 The goal of this labs is to help understand the overall functionality of a program by analyzing code constructs.
Lab 6-1 What is the major code construct found in the only subroutine called by main ? The subroutine called by the main is located at 0x401000.
In this function we can see a jz statement. The choice of the path to follow depend on the result of the comparison that his made with EAX.</description>
    </item>
    
    <item>
      <title>Practical Malware Analysis - Lab 5</title>
      <link>https://nikj-fr.github.io/walkthroughs/pma_lab5/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/walkthroughs/pma_lab5/</guid>
      <description>Discovering IDA Pro Lab 5 This lab use the file Lab05-01.dll. It has to be analyze only on IDA Pro. This is my first experience with this tool.
What is the address of DllMain ? The address of DllMain can be find in the Functions Windows by default on the left side of your screen. It starts at 0x1000D02E.
Also, you can visualize it on the Graph View by turning on Line Prefixes in the settings.</description>
    </item>
    
    <item>
      <title>Google Dork</title>
      <link>https://nikj-fr.github.io/cheatsheets/google_dork/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/cheatsheets/google_dork/</guid>
      <description>Filtres de recherches    Filtre Description Exemple     allintext Recherche les occurrences des mots-clefs dans un texte allintext: &amp;ldquo;keyword_1 keyword_2&amp;rdquo;   intext Recherche les occurences d’un mot-cléf dans un texte intext: &amp;ldquo;keyword&amp;rdquo;   inurl Recherche du mot clé dans l’URL d’un site inurl: &amp;ldquo;keyword&amp;rdquo;   allinurl Recherche d’une URL qui contient les mots-clefs allinurl: &amp;ldquo;keyword_1 keyword_2&amp;rdquo;   intitle Recherche dans le titre des pages webs le mot-clef intitle: &amp;ldquo;keyword&amp;rdquo;   allintitile Recherche dans le titre des pages webs les mots-clefs allintitle: &amp;ldquo;keyword_1 keyword_2&amp;rdquo;   site Liste tous les résultats pour un site site: &amp;ldquo;http://nikj-fr.</description>
    </item>
    
    <item>
      <title>Nmap</title>
      <link>https://nikj-fr.github.io/cheatsheets/nmap/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/cheatsheets/nmap/</guid>
      <description>Types de scan    Parameters Description     sA ACK scan   sF FIN scan    Scanner une IP
nmap [IP]Scanner plusieurs IPs
nmap [IP_1, IP_2]Scanner une liste d’IPs depuis un fichier .txt
nmap -iL [liste.txt]Scanner un sous-réseau
nmap [IP/Mask]</description>
    </item>
    
    <item>
      <title>Practical Malware Analysis - Lab 3</title>
      <link>https://nikj-fr.github.io/walkthroughs/pma_lab3/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/walkthroughs/pma_lab3/</guid>
      <description>Basic Dynamic Analysis Lab 3-1 This lab uses the files Lab03-01.exe.
What are this malware&amp;rsquo;s import and strings ? We use PE Explorer to answer this question with the imports button at the top of the tool.
There is only one DLL used and one function imported. We know that the malware isn’t pack with UPX, NsPack or Upack because when you open the executable with PE Explorer, by default it try to unpack it with those 3 algorithms.</description>
    </item>
    
    <item>
      <title>Practical Malware Analysis - Lab 1</title>
      <link>https://nikj-fr.github.io/walkthroughs/pma_lab1/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/walkthroughs/pma_lab1/</guid>
      <description>Basic Static Analysis Lab 1-1 This lab uses the files Lab01-01.exe and Lab01-01.dll.
Upload the files to http://wwww.VirusTotal.com/ and view the reports. Does either file match any existing antivirus signature ? a) Lab01-01.exe
Virus Total detected a potential Trojan. The signature (MD5) of the malware is bb7425b82141a1c0f7d60e5106676bb1
50/70 positifs antivirus
b) Lab01-01.dll
The signature of the malware is 290934c61de9176ad682ffdd65f0a669
42/67 positifs antivirus
Signature of malware can be generated with WinMD5..</description>
    </item>
    
    <item>
      <title>ECW 2020 - OSINT - Sneakers</title>
      <link>https://nikj-fr.github.io/write-ups/ecw_osint_2020/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/write-ups/ecw_osint_2020/</guid>
      <description>L’ECW 2020 est un challenge Jeopardy français organisé par le Pôle d’Excellence Cyber en partenariat avec la Région Bretagne, Airbus et Thalès.
Sneakers est un challenge d’OSINT maritime où l’on devait récupérer un ensemble d’informations à partir d’une photographie.
Sommaire  Sneakers 1/4 Sneakers 2/4 Sneakers 3/4 Sneakers 4/4 Retex  Sneakers 1/4 What is the name of the shipping company operating the boat in the photo below ?
Pour les non anglophones, il faut simplement récupérer le nom de la compagnie détenant le bateau.</description>
    </item>
    
    <item>
      <title>Suppression des application préinstallées sous Windows 10</title>
      <link>https://nikj-fr.github.io/articles/suppression_application_preinstalle_windows10/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/articles/suppression_application_preinstalle_windows10/</guid>
      <description>Introduction Cet article fait suite à une envie de nettoyage de mon pc. Je vais vous partager la méthode que j’ai utilisé pour supprimer les applications pré-installées sous Windows 10. Malheureusement, quelques applications parviennent à survivre à la méthode (Hello Cortana).
Ouverture d’un interpreteur Powershell  Rechercher le programme Powershell dans votre menu démarrer puis lancer le en tant qu’administrateur.  Lister l’ensemble des applications installées  Dans la fenêtre qui vient de s’ouvrir, utiliser la commande suivante:  Get-AppxPackage | Select Name, PackageFullName Selection du package à supprimer  Lancer la commande suivante en remplaçant le nom du package à supprimer à la place de YourPackageName  Get-AppxPackage YourPackageName | Remove-AppxPackage Liste de toutes les applications possibles de supprimer Important: Je vous conseil de ne pas supprimer le Windows Store afin de pouvoir récupérer les applications que vous allez supprimer.</description>
    </item>
    
    <item>
      <title>WSL</title>
      <link>https://nikj-fr.github.io/articles/wsl2/</link>
      <pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/articles/wsl2/</guid>
      <description>Abstract Depuis quelques années, Microsoft s’est tourné vers l’Open Source en témoigne le rachat de Github. Ce type de licence est très apprécié de la communauté qui à la possibilité d’accéder aux codes sources et d’y effectuer des améliorations mais également par les développeurs car la communauté peut également remonter des bugs. Le seul moyen pour Microsoft d’intégrer les outils du monde Linux dans son système est de passer par la virtualisation.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://nikj-fr.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nikj-fr.github.io/about/</guid>
      <description>About nikj-fr.github.io Il s’agit d’un site personnel qui va référencer un ensemble de ressources qui me semble interessantes. J’y fais aussi mention des CTF auxquels j’ai participé et certains write-up de challenge quand j’ai le temps.
About Me Etudiant en Cybersécurité dans une école Bretonne assez connu :p (Hello l’ENSIBS), je réalise mon alternance à Naval Group. J’adore l’investigation numérique, l’osint et je me découvre une passion pour le reverse.</description>
    </item>
    
  </channel>
</rss>